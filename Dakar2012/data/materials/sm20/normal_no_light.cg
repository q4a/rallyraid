#include "data/materials/sm20/common.cg"


void main_v(float4 position : POSITION,
            float3 normal   : NORMAL,
            float2 Uv       : TEXCOORD0,

            out float4 oPosition    : POSITION,
            out float4 color        : COLOR0,
            out float2 oUv          : TEXCOORD0,
            out float3 objPos       : TEXCOORD1,
            out float3 oNormal      : TEXCOORD2,
//            out float4 oTexCoordProj: TEXCOORD3,

            uniform float4x4 mWorldViewProj,
            uniform float4x4 mWorld
//            uniform float4x4 mTextureMatrix
)
{
  oPosition = mul(position, mWorldViewProj);
  //oPosition = position;
  oUv = Uv;
  //objPos = position.xyz;
  objPos = mul(mWorld, position).xyz;
  oNormal = normal;

//  oTexCoordProj = mul(mTextureMatrix, position);
//  oTexCoordProj.xy = float2(oTexCoordProj.x, -oTexCoordProj.y) * 0.5;
// no need for non d3d calculate shadow
//  oTexCoordProj.xy = oTexCoordProj.xy / oTexCoordProj.w + float2(0.5, 0.5);
}


struct fragment
{
    float4 position     : POSITION;
    float4 color0       : COLOR0;
    float2 texcoord0    : TEXCOORD0;
    float3 objPos       : TEXCOORD1;
    float3 normal       : TEXCOORD2;
//    float4 texCoordProj : TEXCOORD3;
};

struct pixel
{
    float4 color        : COLOR0;
};

pixel main_f(fragment IN,
             uniform sampler2D tex0 : register(s0)
//             uniform sampler2D shadowMap : register(s1),
//             uniform float param
//             uniform float shadowParam,
//             uniform float shadowRes
	      )
{
    pixel OUT;

    float4 col = tex2D(tex0, IN.texcoord0);
//    float4 shadowCoeff = calculate_shadow_ter(IN.texCoordProj, shadowMap, shadowParam, shadowRes, day_multi);

//    col.a = col.a * 0.3;
//    clip(col.a - param);

    OUT.color = col;
//    add_shadow(OUT.color, shadowCoeff /* shadowCoeff2*/);

    return OUT;
}