#include "data/materials/sm20/common.cg"


void main_v(float4 vPosition        : POSITION,
            float3 vNormal          : NORMAL,
            float2 Uv0              : TEXCOORD0,
            float2 Uv1              : TEXCOORD1,

            out float4 oPosition    : POSITION,
            out float4 color        : COLOR,
            out float2 oUv0         : TEXCOORD0,
            out float2 oUv1         : TEXCOORD1,
            out float3 objPos       : TEXCOORD2,
            out float3 oNormal      : TEXCOORD3,
            out float4 oTexCoordProj: TEXCOORD4,

            uniform float4x4 mWorldViewProj,
            uniform float4x4 mWorld,
            uniform float4x4 mInvWorld,
            uniform float4x4 mTextureMatrix,
            uniform float3   mLightColor,
            uniform float3   mLightPos
)
{
    oPosition = mul(vPosition, mWorldViewProj);
    oUv0 = Uv0;
    oUv1 = Uv1;
    oNormal = vNormal;
    //objPos = mul(mWorld, vPosition).xyz;
    objPos = mul(vPosition, mWorld).xyz;
    //objPos = vPosition.xyz;

    oTexCoordProj = mul(vPosition, mTextureMatrix);
    oTexCoordProj.xy = float2(oTexCoordProj.x, -oTexCoordProj.y) * 0.5 + float2(0.5, 0.5);
// no need for non d3d calculate shadow
//    oTexCoordProj.xy = oTexCoordProj.xy / oTexCoordProj.w + float2(0.5, 0.5);

    float3 normal = mul(mInvWorld, float4(vNormal,0.0)).xyz;

    // renormalize normal 
    normal = normalize(normal);

    // position in world coodinates
//    float3 worldpos = mul(mTransWorld, vPosition);
    float3 worldpos = objPos;

    // calculate light vector, vtxpos - lightpos
    float3 L = normalize(mLightPos - float3(0.0, 0.0, 0.0));

    // calculate light color
    float3 tmp = mLightColor * max(dot(-L, normal), 0.0);

    color = float4(tmp.x, tmp.y, tmp.z, 1.0);
}

void main_f(float4 position         : POSITION,
            float4 color            : COLOR,
            float2 Uv0              : TEXCOORD0,
            float2 Uv1              : TEXCOORD1,
            float3 objPos           : TEXCOORD2,
            float3 normal           : TEXCOORD3,
            float4 texCoordProj     : TEXCOORD4,
            uniform sampler2D tex0  : register(s0),
            uniform sampler2D tex1  : register(s1),
            uniform sampler2D tex2  : register(s2),
            uniform sampler2D tex3  : register(s3),
            uniform float shadowParam,
            uniform float shadowRes,
            out float4 oColor       : COLOR0
)
{
    float4 col0 = tex2D(tex0, Uv0);  // sample color map
    //float2 Uv1_ = Uv0*128.0; // frac(Uv0*128.0);
    float4 col1 = tex2D(tex1, Uv1);  // detailmap
    float4 col2 = tex2D(tex3, Uv1*2.0);  // detailmap
    float4 shadowCoeff = calculate_shadow_ter(texCoordProj, tex2, shadowParam, shadowRes, objPos.y);
    float multip = calc_multip(color, 0.6);

    float4 col = ((col0) + ((col1-0.5)*0.5*col0.a) + ((col2-0.5)*0.5*(1.0-col0.a)));
    //float4 col = col0 * multip;
    //col *= multip;
    //color + multip;

    oColor.xyz = col.xyz * (multip * 1.5);
    oColor.a = col.a;
    // * 1.5;
    //oColor = float4(1.0, 1.0, 1.0, 1.0);
    add_shadow(oColor, shadowCoeff);
    //oColor = tex2D(tex2, Uv0);
}
