#include "data/materials/sm20/common.cg"


void main_v(float4 vPosition    : POSITION,
            float3 vNormal      : NORMAL,
            float2 Uv           : TEXCOORD0,

            out float4 oPosition    : POSITION,
            out float4 color        : COLOR,
            out float2 oUv          : TEXCOORD0,
            out float3 objPos       : TEXCOORD1,
            out float3 oNormal      : TEXCOORD2,
            out float4 oTexCoordProj: TEXCOORD3,

            uniform float4x4    mWorldViewProj,
            uniform float4x4    mWorld,
            uniform float4x4    mInvWorld,
            uniform float4x4    mTextureMatrix,
            uniform float3      mLightColor,
            uniform float3      mLightPos
//            uniform float3      eyePosition,
//            uniform float       shininess
)
{
  oPosition = mul(vPosition, mWorldViewProj);
  oUv = Uv;
  oNormal = vNormal;
//  objPos = mul(mWorld, vPosition).xyz;
  objPos = mul(vPosition, mWorld).xyz;
//  objPos = vPosition.xyz;

  float3 normal = mul(mInvWorld, float4(vNormal,0.0)).xyz;

  // renormalize normal 
  normal = normalize(normal);

  // position in world coodinates
//  float3 worldpos = mul(mTransWorld, vPosition);
  float3 worldpos = objPos;

  // calculate light vector, vtxpos - lightpos
  float3 L = normalize(mLightPos - float3(0.0, 0.0, 0.0));
//  float3 V = normalize(eyePosition - worldpos);
//  float3 H = normalize(L + V);

  // calculate light color 
//  float3 tmp = dot(-L, normal);
//  tmp.y = dot(-H, normal); 
//  tmp = lit(tmp.x, tmp.y, shininess).xyz;

//  tmp = mLightColor * tmp.y * tmp.z;
//  color = float4(tmp, 1.0);

  float3 tmp = mLightColor * max(dot(-L, normal), 0.0);
  color = float4(tmp.x, tmp.y, tmp.z, 1.0);

  oTexCoordProj = mul(vPosition, mTextureMatrix);
  oTexCoordProj.xy = float2(oTexCoordProj.x, -oTexCoordProj.y) * 0.5 + float2(0.5, 0.5);
}

void main_f(float4 position         : POSITION,
            float4 color            : COLOR,
            float2 Uv               : TEXCOORD0,
            float3 objPos           : TEXCOORD1,
            float3 normal           : TEXCOORD2,
            float4 texCoordProj     : TEXCOORD3,
            uniform sampler2D tex0  : register(s0),
            uniform sampler2D tex1  : register(s1),
            uniform float shadowParam,
            uniform float shadowRes,
            out float4 oColor       : COLOR0
)
{
    float4 col = tex2D(tex0, Uv);
    float4 shadowCoeff = calculate_shadow_obj(texCoordProj, tex1, shadowParam, shadowRes, objPos.y);
    float multip = calc_multip(color.x, 0.7);

//    oColor = (color + float4(0.2, 0.2, 0.2, 1.0)) * col;
//    oColor *= 1.5;
    oColor.xyz = col.xyz * (multip * 1.6);

    oColor.a = col.a;
    add_shadow(oColor, shadowCoeff);
}
